import {leftKey, rightKey} from './keys.js'
import Body from './body.js'
import create from './create.js'

export default class Guy extends Body {
  constructor (x, y) {
    super(create('svg'))
    this.element.innerHTML = `
    <svg id="guy" width="26.95" height="40">
      <g id="inner-guy">
      <path d="M5.36767 20.549C5.22287 19.7231 5.0491 18.9261 4.64366 18.2814C4.0934 17.412 3.12322 16.818 1.21182 16.8034L1.18286 17.8902C1.86344 17.8684 2.51505 17.9336 3.07254 18.2886C3.54316 18.5857 3.94136 19.0784 4.24544 19.897C2.58022 19.3318 1.63899 19.4985 0.965657 19.9332C0.618131 20.1578 0.343004 20.4548 0.075119 20.7592L0.828095 21.4547C0.871536 21.3894 0.922216 21.3314 0.965657 21.2808C1.77656 20.3171 2.71777 20.3461 3.71691 20.8751C1.55935 21.911 1.21182 23.7367 1.32767 25.0482C1.42903 25.0626 2.38472 25.0482 2.38472 25.0482C2.2906 23.7657 3.20287 22.0487 5.09978 21.5343L5.38215 20.9547L5.36767 20.549Z" fill="#8000DB"/>
      <path d="M19.5584 9.26873C22.7513 4.83485 24.3297 2.63966 23.0626 1.57465C22.2299 0.871899 21.1005 1.37179 19.2761 2.73383C19.2109 4.19006 18.8561 6.26211 18.3927 9.00792L19.5584 9.26873Z" fill="#008298"/>
      <path d="M21.5783 35.843H20.4054C20.3764 37.5166 20.42 39.2408 18.6315 39.7914C18.6895 39.7988 18.7547 39.806 18.8198 39.8132C19.0081 39.835 19.1963 39.8204 19.3774 39.777C21.6001 39.2118 21.5494 37.502 21.5783 35.843Z" fill="#580098"/>
      <path d="M22.8455 35.843L21.6074 32.9161H22.7585L21.7883 30.1558H20.1883L20.934 32.9161H20.0508L21.0064 35.843H21.5784H22.8455Z" fill="#98005E"/>
      <path d="M18.6316 39.7916C20.42 39.2409 20.3765 37.5238 20.4054 35.843H16.1555C16.141 38.3352 17.0388 39.5524 18.6316 39.7916Z" fill="#8000DB"/>
      <path d="M20.0508 32.916H20.934L20.1883 30.1558L15.8731 30.134L14.8668 33.003L15.96 33.0899L14.8668 35.843H21.0064L20.0508 32.916Z" fill="#FF009E"/>
      <path d="M11.0946 33.0176L9.95068 30.1123L8.34336 30.105L9.13254 32.9523H8.22752L9.20494 35.9082L11.2322 35.9299L9.82036 33.003L11.0946 33.0176Z" fill="#98005E"/>
      <path d="M8.22753 32.9522H9.13255L8.34338 30.105L3.96309 30.0833L2.90603 33.0392L4.02101 33.1261L2.90603 35.8937L9.20496 35.9081L8.22753 32.9522Z" fill="#FF009E"/>
      <path d="M18.2261 0.118436C16.5102 -0.301768 15.5038 2.4513 13.0133 7.81252L18.3999 9.00793C18.8633 6.26212 19.2181 4.19008 19.2833 2.73384C19.3485 1.17619 19.0732 0.328538 18.2261 0.118436Z" fill="#00BEDD"/>
      <path d="M21.5204 27.323L22.9395 27.4171L21.4263 24.3961H22.6716L21.5494 21.6502H20.5864H19.7539L20.7675 24.3961H19.6452L21.0064 27.4171L19.7249 27.323L21.086 30.1558L23.0264 30.163L21.5204 27.323Z" fill="#FF9900"/>
      <path d="M22.9395 18.8102L21.8969 15.8833H19.8769L20.7385 18.8102H19.4932L20.5864 21.6502H22.7585L21.4263 18.8102H22.9395Z" fill="#008298"/>
      <path d="M13.0133 7.81253C13.006 7.82702 13.006 7.81253 13.0133 7.81253L10.6168 12.5724L11.9417 12.6014L10.3489 15.8833H21.868L20.3765 15.2531C20.1521 15.1588 20.0144 14.9777 20.0724 14.8546C20.0796 14.84 20.0869 14.8328 20.0941 14.8256C20.1665 14.7241 20.3692 14.7097 20.572 14.7966L20.6371 14.8256L21.6797 15.2675L22.5848 15.6514V9.94253L13.0133 7.81253Z" fill="#FFE001"/>
      <path d="M18.8127 13.2462C19.5366 13.2462 20.1303 12.6593 20.1303 11.9276C20.1303 11.2031 19.5439 10.609 18.8127 10.609C18.0886 10.609 17.495 11.1959 17.495 11.9276C17.495 12.6593 18.0886 13.2462 18.8127 13.2462ZM18.8127 11.2683C19.1747 11.2683 19.4714 11.5654 19.4714 11.9276C19.4714 12.2899 19.1747 12.5869 18.8127 12.5869C18.4506 12.5869 18.1537 12.2899 18.1537 11.9276C18.1537 11.5654 18.4506 11.2683 18.8127 11.2683Z" fill="white"/>
      <path d="M18.854 12.586C19.2172 12.5634 19.4933 12.2505 19.4706 11.887C19.448 11.5236 19.1354 11.2473 18.7721 11.27C18.409 11.2926 18.1328 11.6056 18.1555 11.969C18.1781 12.3324 18.4909 12.6087 18.854 12.586Z" fill="black"/>
      <path d="M22.5848 15.8833V15.6514L20.6371 14.8184L20.572 14.7894C20.3693 14.7024 20.1665 14.7169 20.0942 14.8184C20.0869 14.8256 20.0796 14.84 20.0724 14.8473C20.0218 14.9705 20.1593 15.1516 20.3765 15.2457L21.8679 15.876H21.8969L22.5848 15.8833Z" fill="black"/>
      <path d="M19.4932 18.8102H20.7313L19.8769 15.8833H11.7535L10.5226 18.8102H11.7607L10.5951 21.643H10.6095V21.6502C10.6385 21.6502 10.6674 21.6502 10.6964 21.6502H19.7465H20.5864L19.4932 18.8102Z" fill="#00BEDD"/>
      <path d="M10.5878 21.643L5.38939 20.9403L3.79656 24.1788H4.84637C4.74501 24.3163 4.63641 24.4612 4.53505 24.6135L5.99756 25.9827L7.89448 24.186L9.74071 26.0261L11.6376 24.2294L13.5346 26.0261L15.3808 24.186L15.4386 24.2439L17.2705 25.9755L19.1674 24.1788L19.8914 24.8959L19.6669 24.3888H20.7891L19.7755 21.6358H15.4242H10.6168H10.6023" fill="#FFE001"/>
      <path d="M19.7249 27.323L21.0064 27.4099L20.7457 26.8376L19.1457 25.2437L17.2559 27.1347L15.359 25.2437L13.4694 27.1419L11.6159 25.2872L9.71899 27.084L7.88724 25.2582L5.99756 27.1491L4.10788 25.2655C3.9848 25.4683 3.2463 26.758 2.9929 27.2433L4.43369 27.3302L3.15218 30.0833L21.086 30.163L19.7249 27.323Z" fill="#FFE001"/>
      <path d="M19.8769 24.9033L19.1529 24.186L17.2561 25.9827L15.359 24.186L13.5128 26.0261L11.6159 24.2294L9.719 26.0261L7.87276 24.186L5.97585 25.9827L4.51333 24.6135C4.37577 24.8163 4.23096 25.0336 4.0934 25.2654L5.98309 27.1491L7.87276 25.2582L9.70451 27.0839L11.6014 25.2872L13.4549 27.1419L15.3518 25.251L17.2487 27.1419L19.1384 25.251L20.7385 26.8449L19.8769 24.9033Z" fill="black"/>
      <path d="M8.61849 35.9009C8.58953 37.589 8.64021 39.3205 6.84465 39.8784C6.95326 39.8929 7.06186 39.9073 7.1777 39.9147C7.27182 39.9219 7.37318 39.9147 7.4673 39.8929C7.55419 39.8711 7.63383 39.8494 7.71347 39.8277C7.82932 39.7914 7.94515 39.7552 8.04651 39.719C8.11892 39.6901 8.18408 39.6611 8.24924 39.6321C8.29268 39.6103 8.33612 39.5886 8.37232 39.5669C8.40853 39.5452 8.45197 39.5234 8.48816 39.5016C8.54609 39.4654 8.60401 39.4292 8.65469 39.393C8.69089 39.3713 8.71985 39.3423 8.75605 39.3205C8.82846 39.2626 8.90085 39.2046 8.95877 39.1467C9.02394 39.0815 9.0891 39.009 9.14702 38.9438C9.16875 38.9148 9.19046 38.893 9.21217 38.8641C9.24114 38.8279 9.26287 38.7917 9.28458 38.7555C9.32802 38.683 9.37147 38.6106 9.40767 38.5381C9.42938 38.5019 9.44386 38.4584 9.46559 38.4222C9.47283 38.4004 9.4873 38.3788 9.49454 38.357C9.50903 38.328 9.51627 38.2918 9.53075 38.2628C9.53798 38.2483 9.54522 38.2339 9.54522 38.2121C9.56695 38.1469 9.58866 38.0816 9.60315 38.0164C9.60315 38.002 9.61039 37.9875 9.61039 37.9803C9.62487 37.9367 9.63211 37.8933 9.63934 37.8498C9.63934 37.8426 9.6466 37.8282 9.6466 37.8208C9.65383 37.7702 9.66831 37.7194 9.67555 37.6687C9.68279 37.6397 9.68279 37.6107 9.69002 37.5818C9.69728 37.5528 9.69728 37.5166 9.70451 37.4876C9.72623 37.3427 9.74072 37.205 9.74796 37.0529C9.76243 36.8718 9.76967 36.6906 9.76967 36.5095C9.77691 36.3139 9.77691 36.1184 9.78415 35.9227L8.61849 35.9009Z" fill="#580098"/>
      <path d="M4.36852 35.8937C4.36129 36.3792 4.39024 36.8211 4.45541 37.2122C4.47712 37.3645 4.50609 37.5094 4.54229 37.6469C4.56401 37.7412 4.59297 37.8282 4.61469 37.9151C4.98394 39.0887 5.74416 39.7045 6.83741 39.8712C8.63297 39.3133 8.58229 37.5818 8.61125 35.8937H4.36852Z" fill="#8000DB"/>
      <path d="M26.8709 12.9854C26.4365 14.0721 25.0102 14.9559 22.5775 15.1733V15.6442V15.876C22.7441 15.8688 22.896 15.8543 23.0554 15.8471C23.2435 15.8326 23.4246 15.8109 23.5984 15.7819C23.7577 15.7601 23.9097 15.7311 24.0544 15.7022C24.7133 15.5645 25.2563 15.3616 25.6907 15.1081C25.7849 15.0502 25.879 14.9922 25.9586 14.9343C26.002 14.9053 26.0382 14.8763 26.0818 14.84C26.1975 14.7458 26.3061 14.6445 26.4003 14.543C26.4654 14.4778 26.5162 14.4053 26.5668 14.3329C26.6899 14.1518 26.7841 13.9634 26.8419 13.7751C26.9143 13.5287 26.9216 13.2607 26.8709 12.9854Z" fill="#98005E"/>
      <path d="M23.106 10.0729C22.9395 10.0294 22.7657 9.97872 22.5848 9.9425V11.4277V12.9129V15.1805C25.0174 14.9633 26.4437 14.0721 26.8781 12.9926C26.661 11.8769 25.4011 10.7177 23.106 10.0729Z" fill="#FF009E"/>
      </g>
    </svg>`
    this.load(x, y)
    this.height = 40
    this.width = 26.95
    this.speed = 360
    this.vx = 0
    this.vy = 0
  }

  tick (scale) {
    if (leftKey() && !rightKey()) {
      this.vx = -scale(this.speed)
      this.faceLeft = true
    } else if (rightKey() && !leftKey()) {
      this.vx = scale(this.speed)
      this.faceLeft = false
    } else {
      this.vx = 0
    }

    this.walking = leftKey() || rightKey()
  }

  get faceLeft () {
    return !!this._faceLeft
  }

  set faceLeft (value) {
    this._faceLeft = !!value
    this.element.classList.toggle('left', this.faceLeft)
  }

  get walking () {
    return !!this._walking
  }

  set walking (value) {
    this._walking = !!value
    this.element.classList.toggle('walk', this.walking)
  }

  load (x, y) {
    this.x = x
    this.y = y
  }

  toJSON () {
    return [Math.round(this.x), Math.round(this.y)]
  }
}
